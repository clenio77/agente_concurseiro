"""
Teste completo para verificar se o sistema est√° 100% pronto para produ√ß√£o
"""

import os
import sys
import asyncio
import json
from datetime import datetime
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def test_database_system():
    """Testa sistema de banco de dados"""
    print("\nüóÑÔ∏è Testando sistema de banco de dados...")
    
    try:
        from app.db.database import db_manager, init_database, seed_database
        
        # Testar inicializa√ß√£o
        if init_database():
            print("‚úÖ Banco de dados inicializado")
        else:
            print("‚ùå Falha na inicializa√ß√£o do banco")
            return False
        
        # Testar health check
        if db_manager.health_check():
            print("‚úÖ Health check do banco passou")
        else:
            print("‚ùå Health check do banco falhou")
            return False
        
        # Testar estat√≠sticas
        stats = db_manager.get_stats()
        print(f"‚úÖ Estat√≠sticas obtidas: {stats.get('users_count', 0)} usu√°rios")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de banco: {e}")
        return False

def test_authentication_system():
    """Testa sistema de autentica√ß√£o"""
    print("\nüîê Testando sistema de autentica√ß√£o...")
    
    try:
        from app.auth.auth_manager import auth_manager
        
        # Testar cria√ß√£o de usu√°rio
        result = auth_manager.create_user(
            email="test@example.com",
            username="testuser",
            password="TestPassword123!",
            full_name="Usu√°rio Teste"
        )
        
        if result["success"]:
            print("‚úÖ Usu√°rio criado com sucesso")
            user_id = result["user_id"]
        else:
            print(f"‚ö†Ô∏è Usu√°rio j√° existe ou erro: {result['error']}")
            user_id = None
        
        # Testar autentica√ß√£o
        auth_result = auth_manager.authenticate_user(
            "test@example.com",
            "TestPassword123!",
            "127.0.0.1"
        )
        
        if auth_result["success"]:
            print("‚úÖ Autentica√ß√£o bem-sucedida")
            token = auth_result["access_token"]
            
            # Testar verifica√ß√£o de token
            payload = auth_manager.verify_token(token)
            if payload:
                print("‚úÖ Token verificado com sucesso")
            else:
                print("‚ùå Falha na verifica√ß√£o do token")
                return False
        else:
            print(f"‚ùå Falha na autentica√ß√£o: {auth_result['error']}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de autentica√ß√£o: {e}")
        return False

def test_ai_integration():
    """Testa integra√ß√£o com IA"""
    print("\nü§ñ Testando integra√ß√£o com IA...")
    
    try:
        from app.ai.openai_integration import openai_manager
        
        if openai_manager.enabled:
            print("‚úÖ OpenAI configurada e habilitada")
            
            # Teste b√°sico de contagem de tokens
            token_count = openai_manager.count_tokens("Este √© um teste")
            print(f"‚úÖ Contagem de tokens funcionando: {token_count}")
            
        else:
            print("‚ö†Ô∏è OpenAI n√£o configurada - usando fallbacks")
        
        # Testar fallbacks
        user_profile = {
            "target_position": "Analista",
            "target_banca": "CESPE",
            "experience_level": "intermedi√°rio"
        }
        
        plan = openai_manager._fallback_study_plan(user_profile)
        if plan:
            print("‚úÖ Fallback de plano de estudos funcionando")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na integra√ß√£o IA: {e}")
        return False

def test_monitoring_system():
    """Testa sistema de monitoramento"""
    print("\nüìä Testando sistema de monitoramento...")
    
    try:
        from app.monitoring.metrics import metrics_collector, health_checker, get_metrics
        
        # Testar coleta de m√©tricas
        metrics_collector.collect_system_metrics()
        print("‚úÖ M√©tricas do sistema coletadas")
        
        # Testar health checks
        async def test_health():
            results = await health_checker.run_checks()
            healthy_checks = sum(1 for check in results['checks'].values() if check['status'] == 'healthy')
            total_checks = len(results['checks'])
            print(f"‚úÖ Health checks: {healthy_checks}/{total_checks} passaram")
            return results['status'] == 'healthy'
        
        health_result = asyncio.run(test_health())
        
        # Testar gera√ß√£o de m√©tricas
        metrics_data = get_metrics()
        if metrics_data:
            print("‚úÖ M√©tricas Prometheus geradas")
        
        return health_result
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de monitoramento: {e}")
        return False

def test_backup_system():
    """Testa sistema de backup"""
    print("\nüíæ Testando sistema de backup...")
    
    try:
        from app.backup.backup_manager import backup_manager
        
        # Testar cria√ß√£o de backup
        backup_path = backup_manager.create_database_backup()
        if backup_path:
            print(f"‚úÖ Backup criado: {backup_path}")
        else:
            print("‚ö†Ô∏è Backup n√£o criado (normal se banco n√£o existir)")
        
        # Testar listagem de backups
        backups = backup_manager.list_backups()
        print(f"‚úÖ {len(backups)} backups listados")
        
        # Testar status
        status = backup_manager.get_backup_status()
        print(f"‚úÖ Status do backup obtido: {status['total_backups']} backups")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de backup: {e}")
        return False

def test_writing_system():
    """Testa sistema avan√ßado de reda√ß√£o"""
    print("\n‚úçÔ∏è Testando sistema de reda√ß√£o...")
    
    try:
        from tools.writing_tool import WritingTool
        
        writing_tool = WritingTool()
        
        # Texto de teste
        texto_teste = """
        A sustentabilidade ambiental representa um dos maiores desafios contempor√¢neos. 
        
        Em primeiro lugar, √© fundamental reconhecer que o desenvolvimento econ√¥mico n√£o pode ocorrer em detrimento do meio ambiente. Portanto, torna-se necess√°rio implementar pol√≠ticas p√∫blicas que promovam o equil√≠brio entre crescimento e preserva√ß√£o.
        
        Ademais, a educa√ß√£o ambiental constitui ferramenta essencial para conscientiza√ß√£o da popula√ß√£o. Assim, investimentos em programas educacionais podem gerar mudan√ßas significativas no comportamento social.
        
        Conclui-se, portanto, que a sustentabilidade ambiental exige a√ß√µes coordenadas entre governo, empresas e sociedade civil para garantir um futuro sustent√°vel para as pr√≥ximas gera√ß√µes.
        """
        
        # Testar avalia√ß√£o por banca
        resultado = writing_tool.evaluate_essay_by_banca(
            texto_teste, 
            "CESPE", 
            "dissertativo-argumentativo",
            "Sustentabilidade ambiental"
        )
        
        if "error" not in resultado:
            print(f"‚úÖ Reda√ß√£o avaliada - Nota: {resultado['score_final']}/10")
            print(f"   Crit√©rios avaliados: {len(resultado['scores_por_criterio'])}")
        else:
            print(f"‚ùå Erro na avalia√ß√£o: {resultado['error']}")
            return False
        
        # Testar banco de temas
        tema = writing_tool.get_tema_by_banca("CESPE")
        if "error" not in tema:
            print(f"‚úÖ Tema obtido: {tema['tema']}")
        else:
            print(f"‚ö†Ô∏è Erro ao obter tema: {tema['error']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de reda√ß√£o: {e}")
        return False

def test_gamification_system():
    """Testa sistema de gamifica√ß√£o"""
    print("\nüéÆ Testando sistema de gamifica√ß√£o...")
    
    try:
        from app.utils.gamification import GamificationSystem
        
        # Criar sistema de gamifica√ß√£o
        gamification = GamificationSystem("test_user_prod")
        
        # Testar adi√ß√£o de experi√™ncia
        result = gamification.add_experience(150, "daily_quiz")
        print(f"‚úÖ Experi√™ncia adicionada: {result.get('message', 'OK')}")
        
        # Testar verifica√ß√£o de conquistas
        activity_data = {
            "current_streak": 10,
            "study_hours": 30,
            "best_score": 88
        }
        
        new_achievements = gamification.check_achievements(activity_data)
        print(f"‚úÖ Conquistas verificadas: {len(new_achievements)} novas")
        
        # Testar resumo do usu√°rio
        summary = gamification.get_user_summary()
        print(f"‚úÖ Resumo gerado - N√≠vel: {summary['level']}, Pontos: {summary['total_points']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de gamifica√ß√£o: {e}")
        return False

def test_analytics_system():
    """Testa sistema de analytics"""
    print("\nüìà Testando sistema de analytics...")
    
    try:
        from app.utils.performance_predictor import PerformancePredictor
        
        predictor = PerformancePredictor()
        
        # Dados de teste
        user_data = {
            'mock_exam_scores': [
                {'score': 70, 'date': '2024-01-01'},
                {'score': 75, 'date': '2024-01-08'},
                {'score': 80, 'date': '2024-01-15'}
            ],
            'subject_progress': {
                'Portugu√™s': {'last_score': 82},
                'Matem√°tica': {'last_score': 68},
                'Direito': {'last_score': 85}
            },
            'total_study_hours': 100,
            'simulados_completed': 5
        }
        
        # Testar an√°lise de desempenho
        metrics = predictor.analyze_performance(user_data)
        print(f"‚úÖ M√©tricas analisadas - Score geral: {metrics.overall_score:.1f}%")
        
        # Testar predi√ß√£o
        prediction = predictor.predict_exam_performance(user_data, "CESPE", 60)
        print(f"‚úÖ Predi√ß√£o gerada - Score previsto: {prediction.predicted_score:.1f}%")
        print(f"   Confian√ßa: {prediction.confidence:.1f}%")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema de analytics: {e}")
        return False

def test_docker_readiness():
    """Testa se o sistema est√° pronto para Docker"""
    print("\nüê≥ Testando prontid√£o para Docker...")
    
    try:
        # Verificar arquivos essenciais
        essential_files = [
            "Dockerfile",
            "docker-compose.yml",
            "requirements-prod.txt",
            "scripts/entrypoint.sh",
            "deploy.sh"
        ]
        
        missing_files = []
        for file in essential_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        if missing_files:
            print(f"‚ùå Arquivos faltando: {missing_files}")
            return False
        else:
            print("‚úÖ Todos os arquivos Docker est√£o presentes")
        
        # Verificar estrutura de diret√≥rios
        required_dirs = [
            "app/db",
            "app/auth", 
            "app/api",
            "app/monitoring",
            "app/backup",
            "app/ai"
        ]
        
        missing_dirs = []
        for dir_path in required_dirs:
            if not os.path.exists(dir_path):
                missing_dirs.append(dir_path)
        
        if missing_dirs:
            print(f"‚ùå Diret√≥rios faltando: {missing_dirs}")
            return False
        else:
            print("‚úÖ Estrutura de diret√≥rios completa")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o Docker: {e}")
        return False

def test_ci_cd_readiness():
    """Testa se o sistema est√° pronto para CI/CD"""
    print("\nüîÑ Testando prontid√£o para CI/CD...")
    
    try:
        # Verificar arquivos de CI/CD
        cicd_files = [
            ".github/workflows/ci-cd.yml"
        ]
        
        missing_files = []
        for file in cicd_files:
            if not os.path.exists(file):
                missing_files.append(file)
        
        if missing_files:
            print(f"‚ùå Arquivos CI/CD faltando: {missing_files}")
            return False
        else:
            print("‚úÖ Arquivos CI/CD presentes")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o CI/CD: {e}")
        return False

def main():
    """Executa todos os testes de produ√ß√£o"""
    print("üöÄ TESTE COMPLETO - SISTEMA PRONTO PARA PRODU√á√ÉO")
    print("=" * 60)
    
    tests = [
        ("Sistema de Banco de Dados", test_database_system),
        ("Sistema de Autentica√ß√£o", test_authentication_system),
        ("Integra√ß√£o com IA", test_ai_integration),
        ("Sistema de Monitoramento", test_monitoring_system),
        ("Sistema de Backup", test_backup_system),
        ("Sistema de Reda√ß√£o", test_writing_system),
        ("Sistema de Gamifica√ß√£o", test_gamification_system),
        ("Sistema de Analytics", test_analytics_system),
        ("Prontid√£o Docker", test_docker_readiness),
        ("Prontid√£o CI/CD", test_ci_cd_readiness)
    ]
    
    passed = 0
    failed = 0
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå Erro no teste {test_name}: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print("üìã RESUMO DOS TESTES DE PRODU√á√ÉO:")
    print(f"   ‚úÖ Passou: {passed}/{len(tests)}")
    print(f"   ‚ùå Falhou: {failed}/{len(tests)}")
    
    if failed == 0:
        print("\nüéâ SISTEMA 100% PRONTO PARA PRODU√á√ÉO!")
        print("\nüöÄ Para fazer deploy:")
        print("   ./deploy.sh production")
        print("\nüåê Ap√≥s deploy, acesse:")
        print("   ‚Ä¢ API: http://localhost:8000")
        print("   ‚Ä¢ Interface: http://localhost:8501")
        print("   ‚Ä¢ Docs: http://localhost:8000/docs")
        print("   ‚Ä¢ Monitoramento: http://localhost:3000")
        
        return True
    else:
        print(f"\n‚ö†Ô∏è {failed} teste(s) falharam. Corrija os problemas antes do deploy.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
