"""
Utilit√°rio de dashboard do sistema.
Fornece fun√ß√µes para renderizar o painel principal do usu√°rio, exibir m√©tricas, conquistas, recomenda√ß√µes e atualizar dados do dashboard.
"""

import streamlit as st
import json
import pandas as pd
import matplotlib.pyplot as plt
import altair as alt
from datetime import datetime, timedelta
from .gamification import GamificationSystem
from .notifications import NotificationManager, generate_daily_notifications

def _get_fallback_dashboard_data():
    """
    Retorna dados de fallback para o dashboard caso n√£o seja poss√≠vel carregar do arquivo.
    Utilizado para garantir que o dashboard funcione mesmo sem dados persistidos.
    :return: Dicion√°rio com dados simulados de progresso, atividades, desempenho, etc.
    """
    return {
        "progress_summary": {
            "completed_weeks": 2,
            "total_weeks": 24,
            "completion_percentage": 8.33,
            "current_phase": "Base Te√≥rica",
            "next_milestone": "In√≠cio da fase de exerc√≠cios",
            "days_until_exam": 180,
            "total_study_hours": 40,
            "weekly_goal_hours": 20,
            "current_week_hours": 8
        },
        "subject_progress": {
            "Portugu√™s": {"completion": 15, "priority": "Alta", "hours_planned": 48, "hours_completed": 7, "last_score": 70, "trend": "improving"},
            "Matem√°tica": {"completion": 10, "priority": "M√©dia", "hours_planned": 36, "hours_completed": 4, "last_score": 60, "trend": "stable"},
            "Direito": {"completion": 5, "priority": "Alta", "hours_planned": 60, "hours_completed": 3, "last_score": 65, "trend": "needs_attention"}
        },
        "upcoming_activities": [
            {"date": "2024-01-16", "week": 3, "activity": {"type": "Estudo", "description": "Revis√£o de gram√°tica", "duration": "3 horas", "priority": "Alta"}},
            {"date": "2024-01-17", "week": 3, "activity": {"type": "Exerc√≠cios", "description": "Quest√µes de matem√°tica", "duration": "2 horas", "priority": "M√©dia"}},
            {"date": "2024-01-18", "week": 4, "activity": {"type": "Reda√ß√£o", "description": "Pr√°tica de reda√ß√£o", "duration": "2 horas", "priority": "M√©dia"}}
        ],
        "performance_metrics": {
            "mock_exam_scores": [
                {"date": "2024-01-01", "score": 65, "subjects": {"Portugu√™s": 70, "Matem√°tica": 60, "Direito": 65}},
                {"date": "2024-01-08", "score": 72, "subjects": {"Portugu√™s": 75, "Matem√°tica": 65, "Direito": 75}}
            ],
            "writing_scores": [
                {"date": "2024-01-05", "score": 7.5, "criteria": {"estrutura": 8, "argumentacao": 7, "gramatica": 8}},
                {"date": "2024-01-12", "score": 8.0, "criteria": {"estrutura": 8, "argumentacao": 8, "gramatica": 8}}
            ],
            "questions_accuracy": 68,
            "consistency_score": 75,
            "improvement_rate": 8.5
        },
        "achievements": [],
        "recommendations": [
            {
                "type": "study_focus",
                "priority": "high",
                "title": "Foque em Matem√°tica",
                "description": "Sua pontua√ß√£o em Matem√°tica precisa melhorar.",
                "action": "Dedique mais 2 horas semanais"
            }
        ],
        "study_streak": {"current_streak": 5, "longest_streak": 8, "total_study_days": 15},
        "goals": {
            "weekly_hours": {"target": 20, "current": 8, "percentage": 40},
            "target_score": {"overall": 80, "current_average": 68, "gap": 12}
        }
    }

def render_dashboard():
    """
    Renderiza o dashboard principal do sistema.
    Exibe notifica√ß√µes, m√©tricas de progresso, gamifica√ß√£o, gr√°ficos, pr√≥ximas atividades, conquistas e recomenda√ß√µes.
    """
    st.title("üìä Dashboard - Acompanhamento de Estudos")

    # Carregar dados do dashboard (em produ√ß√£o, viria do banco de dados)
    try:
        with open("data/dashboard/dashboard_data.json", "r", encoding='utf-8') as f:
            dashboard_data = json.load(f)
    except FileNotFoundError:
        # Tentar carregar do local antigo
        try:
            with open("data/dashboard_data.json", "r", encoding='utf-8') as f:
                dashboard_data = json.load(f)
        except:
            dashboard_data = _get_fallback_dashboard_data()
    except Exception as e:
        print(f"Erro ao carregar dados do dashboard: {e}")
        dashboard_data = _get_fallback_dashboard_data()

    # Sistema de notifica√ß√µes
    notifications_manager = st.session_state.notifications

    # Gerar notifica√ß√µes di√°rias (simula√ß√£o)
    if st.button("üîî Atualizar Notifica√ß√µes", help="Gera notifica√ß√µes baseadas na sua atividade"):
        with st.spinner("Gerando notifica√ß√µes..."):
            summary = generate_daily_notifications(
                st.session_state.get('current_user', 'demo_user'),
                dashboard_data
            )
            st.success(f"‚úÖ {summary['total_unread']} notifica√ß√µes geradas!")

    # Exibir notifica√ß√µes n√£o lidas
    unread_notifications = notifications_manager.get_unread_notifications(5)

    if unread_notifications:
        st.markdown("### üîî Notifica√ß√µes")

        for notification in unread_notifications:
            # Emoji baseado na prioridade
            priority_emoji = {
                "urgent": "üö®",
                "high": "üî¥",
                "medium": "üü°",
                "low": "üü¢"
            }.get(notification.priority.value, "üîµ")

            # Emoji baseado no tipo
            type_emoji = {
                "study_reminder": "üìö",
                "quiz_reminder": "üéØ",
                "goal_achievement": "üèÜ",
                "performance_alert": "üìä",
                "streak_milestone": "üî•",
                "exam_countdown": "üìÖ",
                "recommendation": "üí°"
            }.get(notification.type.value, "üì¢")

            with st.expander(f"{priority_emoji} {type_emoji} {notification.title}", expanded=notification.priority.value in ["urgent", "high"]):
                st.write(notification.message)

                col1, col2, col3 = st.columns(3)

                with col1:
                    if notification.action_text and st.button(f"üöÄ {notification.action_text}", key=f"action_{notification.id}"):
                        notifications_manager.mark_as_read(notification.id)
                        st.success("A√ß√£o executada!")

                with col2:
                    if st.button("‚úÖ Marcar como lida", key=f"read_{notification.id}"):
                        notifications_manager.mark_as_read(notification.id)
                        st.experimental_rerun()

                with col3:
                    if st.button("‚ùå Descartar", key=f"dismiss_{notification.id}"):
                        notifications_manager.dismiss_notification(notification.id)
                        st.experimental_rerun()

        st.markdown("---")

    # Inicializar sistemas
    if 'gamification' not in st.session_state:
        st.session_state.gamification = GamificationSystem(
            user_id=st.session_state.get('current_user', 'demo_user')
        )

    if 'notifications' not in st.session_state:
        st.session_state.notifications = NotificationManager(
            user_id=st.session_state.get('current_user', 'demo_user')
        )
    
    # Header com m√©tricas principais
    st.subheader("üìä Vis√£o Geral")

    # M√©tricas principais em cards
    col1, col2, col3, col4 = st.columns(4)

    progress_summary = dashboard_data["progress_summary"]

    with col1:
        st.metric(
            "üìÖ Progresso Geral",
            f"{progress_summary['completion_percentage']:.1f}%",
            delta=f"+{progress_summary.get('weekly_progress', 4.2):.1f}% esta semana"
        )

    with col2:
        st.metric(
            "‚è∞ Horas Estudadas",
            f"{progress_summary.get('total_study_hours', 0)}h",
            delta=f"+{progress_summary.get('current_week_hours', 0)}h esta semana"
        )

    with col3:
        st.metric(
            "üéØ Dias at√© Prova",
            f"{progress_summary.get('days_until_exam', 'N/A')}",
            delta=None
        )

    with col4:
        streak = dashboard_data.get('study_streak', {})
        st.metric(
            "üî• Sequ√™ncia de Estudos",
            f"{streak.get('current_streak', 0)} dias",
            delta=f"Recorde: {streak.get('longest_streak', 0)}"
        )

    # Se√ß√£o de Gamifica√ß√£o
    gamification = st.session_state.gamification
    user_summary = gamification.get_user_summary()

    st.markdown("---")
    st.subheader("üéÆ Progresso e Conquistas")

    # M√©tricas de gamifica√ß√£o
    col1, col2, col3, col4, col5 = st.columns(5)

    with col1:
        st.metric("üéØ N√≠vel", user_summary['level'])

    with col2:
        st.metric("‚≠ê Pontos", f"{user_summary['total_points']:,}")

    with col3:
        achievement_progress = f"{user_summary['achievements_earned']}/{user_summary['total_achievements']}"
        st.metric("üèÜ Conquistas", achievement_progress)

    with col4:
        badge_progress = f"{user_summary['badges_earned']}/{user_summary['total_badges']}"
        st.metric("üéñÔ∏è Badges", badge_progress)

    with col5:
        st.metric("üìö Melhor Nota", f"{user_summary['best_score']}%")

    # Barra de experi√™ncia
    if user_summary['level'] > 1:
        # Calcular XP necess√°rio para pr√≥ximo n√≠vel
        current_level = user_summary['level']
        xp_for_current = sum(100 + (i - 1) * 50 for i in range(1, current_level))
        xp_for_next = 100 + (current_level - 1) * 50
        current_level_xp = user_summary['experience'] - xp_for_current

        progress_pct = current_level_xp / xp_for_next
        st.write(f"**Experi√™ncia:** {current_level_xp}/{xp_for_next} XP para n√≠vel {current_level + 1}")
        st.progress(progress_pct)

    # Conquistas recentes e em progresso
    col1, col2 = st.columns(2)

    with col1:
        st.write("**üèÜ Conquistas Recentes**")
        recent_achievements = gamification.get_recent_achievements(3)

        if recent_achievements:
            for achievement in recent_achievements:
                st.markdown(f"""
                {achievement.icon} **{achievement.title}** (+{achievement.points} pts)
                {achievement.description}
                """)
        else:
            st.info("Complete atividades para ganhar conquistas!")

    with col2:
        st.write("**üìà Progresso de Conquistas**")
        progress_achievements = gamification.get_progress_achievements()

        if progress_achievements:
            for achievement in progress_achievements[:3]:
                progress_pct = achievement.progress / achievement.max_progress
                st.write(f"{achievement.icon} **{achievement.title}**")
                st.progress(progress_pct)
                st.caption(f"{achievement.progress:.0f}/{achievement.max_progress:.0f}")
        else:
            st.info("Continue estudando para desbloquear conquistas!")

    # Barra de progresso principal
    st.subheader("üìà Progresso do Plano de Estudos")
    progress = progress_summary["completion_percentage"]
    st.progress(progress / 100)

    col1, col2 = st.columns(2)
    with col1:
        st.write(f"**{progress:.1f}%** conclu√≠do")
        st.write(f"**Fase atual:** {progress_summary['current_phase']}")
    with col2:
        st.write(f"**Semanas:** {progress_summary['completed_weeks']}/{progress_summary['total_weeks']}")
        if 'next_milestone' in progress_summary:
            st.write(f"**Pr√≥ximo:** {progress_summary['next_milestone']}")

    # Layout em colunas para conte√∫do principal
    col1, col2 = st.columns([2, 1])

    # Coluna 1: Progresso por mat√©ria e gr√°ficos
    with col1:
        
        # Progresso por mat√©ria com mais detalhes
        st.subheader("üìö Progresso por Mat√©ria")

        # Preparar dados para o gr√°fico
        subjects = list(dashboard_data["subject_progress"].keys())
        completions = [data["completion"] for data in dashboard_data["subject_progress"].values()]
        priorities = [data["priority"] for data in dashboard_data["subject_progress"].values()]
        last_scores = [data.get("last_score", 0) for data in dashboard_data["subject_progress"].values()]
        trends = [data.get("trend", "stable") for data in dashboard_data["subject_progress"].values()]

        # Criar DataFrame para o Altair
        df = pd.DataFrame({
            'Mat√©ria': subjects,
            'Progresso': completions,
            'Prioridade': priorities,
            '√öltima Nota': last_scores,
            'Tend√™ncia': trends
        })

        # Gr√°fico de barras com progresso
        chart = alt.Chart(df).mark_bar().encode(
            x=alt.X('Progresso:Q', title='Progresso (%)', scale=alt.Scale(domain=[0, 100])),
            y=alt.Y('Mat√©ria:N', sort='-x', title=''),
            color=alt.Color('Prioridade:N',
                          scale=alt.Scale(
                              domain=['Baixa', 'M√©dia', 'Alta', 'Muito Alta'],
                              range=['#90CAF9', '#4CAF50', '#FFC107', '#F44336']
                          ),
                          legend=alt.Legend(title="Prioridade")),
            tooltip=['Mat√©ria', 'Progresso', 'Prioridade', '√öltima Nota', 'Tend√™ncia']
        ).properties(height=250, title="Progresso de Estudos por Mat√©ria")

        st.altair_chart(chart, use_container_width=True)

        # Tabela detalhada de mat√©rias
        with st.expander("üìã Detalhes por Mat√©ria"):
            for subject, data in dashboard_data["subject_progress"].items():
                col_a, col_b, col_c, col_d = st.columns(4)

                with col_a:
                    st.write(f"**{subject}**")
                    st.write(f"Progresso: {data['completion']}%")

                with col_b:
                    st.write(f"Prioridade: {data['priority']}")
                    if 'last_score' in data:
                        st.write(f"√öltima nota: {data['last_score']}%")

                with col_c:
                    st.write(f"Horas: {data.get('hours_completed', 0)}/{data.get('hours_planned', 0)}")
                    if 'trend' in data:
                        trend_emoji = {"improving": "üìà", "stable": "‚û°Ô∏è", "needs_attention": "üìâ"}.get(data['trend'], "‚û°Ô∏è")
                        st.write(f"Tend√™ncia: {trend_emoji}")

                with col_d:
                    if 'next_topic' in data:
                        st.write(f"Pr√≥ximo: {data['next_topic']}")

                st.divider()
        
        # Gr√°fico de desempenho
        st.subheader("Evolu√ß√£o de Desempenho")
        
        # Preparar dados para o gr√°fico de linha
        if dashboard_data["performance_metrics"]["mock_exam_scores"]:
            mock_dates = [item["date"] for item in dashboard_data["performance_metrics"]["mock_exam_scores"]]
            mock_scores = [item["score"] for item in dashboard_data["performance_metrics"]["mock_exam_scores"]]
            
            df_mock = pd.DataFrame({
                'Data': pd.to_datetime(mock_dates),
                'Pontua√ß√£o': mock_scores,
                'Tipo': ['Simulado'] * len(mock_dates)
            })
            
            if dashboard_data["performance_metrics"]["writing_scores"]:
                writing_dates = [item["date"] for item in dashboard_data["performance_metrics"]["writing_scores"]]
                writing_scores = [item["score"] * 10 for item in dashboard_data["performance_metrics"]["writing_scores"]]  # Converter para escala 0-100
                
                df_writing = pd.DataFrame({
                    'Data': pd.to_datetime(writing_dates),
                    'Pontua√ß√£o': writing_scores,
                    'Tipo': ['Reda√ß√£o'] * len(writing_dates)
                })
                
                # Combinar DataFrames
                df_performance = pd.concat([df_mock, df_writing])
            else:
                df_performance = df_mock
            
            # Criar gr√°fico de linha
            line_chart = alt.Chart(df_performance).mark_line(point=True).encode(
                x='Data:T',
                y=alt.Y('Pontua√ß√£o:Q', scale=alt.Scale(domain=[0, 100])),
                color='Tipo:N',
                tooltip=['Data', 'Pontua√ß√£o', 'Tipo']
            ).properties(height=250)
            
            st.altair_chart(line_chart, use_container_width=True)
        else:
            st.info("Ainda n√£o h√° dados de desempenho dispon√≠veis.")
    
    # Coluna 2: Pr√≥ximas atividades, conquistas e recomenda√ß√µes
    with col2:
        # Pr√≥ximas atividades
        st.subheader("üìÖ Pr√≥ximas Atividades")

        for item in dashboard_data["upcoming_activities"][:3]:  # Mostrar apenas 3
            activity = item["activity"]

            # Emoji baseado no tipo de atividade
            type_emoji = {
                "Estudo": "üìñ",
                "Exerc√≠cios": "‚úèÔ∏è",
                "Simulado": "üéØ",
                "Reda√ß√£o": "‚úçÔ∏è",
                "Revis√£o": "üîÑ"
            }.get(activity['type'], "üìù")

            # Cor baseada na prioridade
            priority_color = {
                "Muito Alta": "üî¥",
                "Alta": "üü†",
                "M√©dia": "üü°",
                "Baixa": "üü¢"
            }.get(activity.get('priority', 'M√©dia'), "üü°")

            st.markdown(f"""
            {type_emoji} **{activity['type']}** {priority_color}
            üìÖ {item.get('date', f"Semana {item.get('week', 'N/A')}")}
            {activity['description']}
            ‚è±Ô∏è {activity['duration']}
            """)
            st.divider()

        # Conquistas recentes
        if 'achievements' in dashboard_data and dashboard_data['achievements']:
            st.subheader("üèÜ Conquistas Recentes")

            for achievement in dashboard_data['achievements'][-2:]:  # √öltimas 2 conquistas
                st.markdown(f"""
                {achievement['icon']} **{achievement['title']}**
                {achievement['description']}
                üéÅ +{achievement['points']} pontos
                """)
                st.divider()

        # Recomenda√ß√µes
        if 'recommendations' in dashboard_data and dashboard_data['recommendations']:
            st.subheader("üí° Recomenda√ß√µes")

            for rec in dashboard_data['recommendations'][:2]:  # Top 2 recomenda√ß√µes
                priority_emoji = {"high": "üî•", "medium": "‚ö†Ô∏è", "low": "üí≠"}.get(rec.get('priority', 'medium'), "üí≠")

                st.markdown(f"""
                {priority_emoji} **{rec['title']}**
                {rec['description']}
                ‚úÖ {rec['action']}
                """)

                if 'estimated_impact' in rec:
                    st.caption(f"üìä Impacto estimado: {rec['estimated_impact']}")

                st.divider()
        
        # M√©tricas de desempenho
        st.subheader("M√©tricas")
        
        # Calcular m√©dia de simulados
        mock_scores = [item["score"] for item in dashboard_data["performance_metrics"]["mock_exam_scores"]]
        mock_avg = sum(mock_scores) / len(mock_scores) if mock_scores else 0
        
        # Calcular m√©dia de reda√ß√µes
        writing_scores = [item["score"] for item in dashboard_data["performance_metrics"]["writing_scores"]]
        writing_avg = sum(writing_scores) / len(writing_scores) if writing_scores else 0
        
        # Exibir m√©tricas
        col_a, col_b = st.columns(2)
        col_a.metric("M√©dia Simulados", f"{mock_avg:.1f}%")
        col_b.metric("M√©dia Reda√ß√µes", f"{writing_avg:.1f}")
        
        col_c, col_d = st.columns(2)
        col_c.metric("Acertos Quest√µes", f"{dashboard_data['performance_metrics']['questions_accuracy']}%")
        col_d.metric("Semanas Conclu√≠das", f"{dashboard_data['progress_summary']['completed_weeks']}")

        # Se√ß√£o de metas
        if 'goals' in dashboard_data:
            st.subheader("üéØ Metas e Objetivos")
            goals = dashboard_data['goals']

            # Meta de horas semanais
            if 'weekly_hours' in goals:
                weekly = goals['weekly_hours']
                st.write("**üìö Meta Semanal de Estudos**")
                progress_pct = weekly.get('percentage', 0) / 100
                st.progress(progress_pct)
                st.write(f"{weekly.get('current', 0)}h / {weekly.get('target', 0)}h ({weekly.get('percentage', 0):.0f}%)")

            # Meta de pontua√ß√£o
            if 'target_score' in goals:
                target = goals['target_score']
                st.write("**üéØ Meta de Pontua√ß√£o**")
                current = target.get('current_average', 0)
                goal = target.get('overall', 80)
                progress_pct = min(current / goal, 1.0)
                st.progress(progress_pct)
                st.write(f"{current:.0f}% / {goal}% (faltam {target.get('gap', 0)} pontos)")

        # Pr√≥ximos marcos
        if 'next_milestones' in dashboard_data:
            st.subheader("üöÄ Pr√≥ximos Marcos")

            for milestone in dashboard_data['next_milestones'][:2]:
                st.write(f"**{milestone['title']}**")
                st.write(milestone['description'])

                progress = milestone.get('progress', 0)
                st.progress(progress / 100)

                col_a, col_b = st.columns(2)
                col_a.write(f"üìÖ Meta: {milestone.get('target_date', 'N/A')}")
                col_b.write(f"üìà {progress}% conclu√≠do")

                if 'estimated_completion' in milestone:
                    st.caption(f"‚è∞ Previs√£o: {milestone['estimated_completion']}")

                st.divider()

def update_dashboard_data(new_data):
    """
    Atualiza os dados do dashboard no arquivo JSON.
    Mescla os dados existentes com os novos dados fornecidos.
    :param new_data: Dicion√°rio com os dados a serem atualizados.
    :return: True se atualizar com sucesso, False caso contr√°rio.
    """
    try:
        # Carregar dados existentes
        try:
            with open("data/dashboard_data.json", "r") as f:
                current_data = json.load(f)
        except:
            current_data = {}
        
        # Atualizar com novos dados
        if isinstance(current_data, dict) and isinstance(new_data, dict):
            for key, value in new_data.items():
                if key in current_data and isinstance(current_data[key], dict) and isinstance(value, dict):
                    current_data[key].update(value)
                else:
                    current_data[key] = value
        else:
            current_data = new_data
        
        # Salvar dados atualizados
        with open("data/dashboard_data.json", "w") as f:
            json.dump(current_data, f, indent=2)
        
        return True
    except Exception as e:
        print(f"Erro ao atualizar dashboard: {str(e)}")
        return False